if getgenv().Rain then
	--ui
    getgenv().Tabs = {}
    getgenv().Addon = Addon or getgenv().Rain.Window:AddTab("More ESP")
    getgenv().MobESP = MobESP or Addon:AddLeftGroupbox('Mob ESP')
    --player esp
    MobESP:AddToggle('MobESP', {
        Text = 'Mob ESP',
        Default = true,
    }):AddKeyPicker('ESPKeypicker', {
        Default = 'F1',
        SyncToggleState = true,
        Mode = 'Toggle',
        Text = 'Mob ESP',
        NoUI = false,
    })
    MobESP:AddLabel("Mob ESP Text Color"):AddColorPicker('MobTextColor', {
        Default = Color3.fromRGB(255,255,255),
        Title = 'Mob ESP Text Color',
        Transparency = nil,
    })
    MobESP:AddSlider('MobESPDistance', {
        Text = 'Mob ESP Distance',
        Default = 10000,
        Min = 0,
        Max = 60000,
        Rounding = 0,
        Compact = false,
    })
    MobESP:AddToggle('MobOutline', {
        Text = 'Mob ESP Text Outline',
        Default = true,
    })
    MobESP:AddSlider('MobTextSize', {
        Text = 'Mob ESP Text Size',
        Default = 15,
        Min = 0,
        Max = 50,
        Rounding = 0,
        Compact = false,
    })
    MobESP:AddToggle('MobDistance', {
        Text = 'Display Mob Distance',
        Default = true,
    })
    MobESP:AddToggle('MobHealthText', {
        Text = 'Display Mob Health',
        Default = true,
    })
    MobESP:AddSlider('MobTextTransparency', {
        Text = 'Mob ESP Text Transparency',
        Default = 1,
        Min = 0,
        Max = 1,
        Rounding = 1,
        Compact = false,
    })
    MobESP:AddToggle('MobTracers', {
        Text = 'Mob Tracers',
        Default = false,
    })
    MobESP:AddLabel("Mob Tracers Color"):AddColorPicker('MobTracersColor', {
        Default = Color3.fromRGB(255,255,255),
        Title = 'ESP Text Color',
        Transparency = nil,
    })
    MobESP:AddSlider('MobTracersTransparency', {
        Text = 'Mob Tracers Transparency',
        Default = 1,
        Min = 0,
        Max = 1,
        Rounding = 1,
        Compact = false,
    })
    MobESP:AddSlider('MobTracersThickness', {
        Text = 'Mob Tracers Thickness',
        Default = 1,
        Min = 1,
        Max = 10,
        Rounding = 1,
        Compact = false,
    })
	--variables
	local players = cachedServices["Players"]
	local localPlayer = players.LocalPlayer
	local camera = workspace.CurrentCamera
	local userInputService = game:GetService("UserInputService")
	local runService = game:GetService("RunService")
	function draw(type, properties)
		local drawing = Drawing.new(type)
		for i, v in next, properties do
			drawing[i] = v
		end
		return drawing
	end
	function round(vector)
		return Vector2.new(vector.x - vector.x % 1, vector.y - vector.y % 1)
	end
	local esp = {}
    local espMobs = {}
    esp.removeMob = function(mob)
        for i,v in next, espMobs do
            if v == mob then
                espMobs[mob] = nil
                table.remove(espMobs,i)
            end
        end
    end
    esp.IsAMob = function(mob)
        if mob.Name:find("%.") ~= nil then
            return true
        end
        return false
    end
    --esp
    esp.drawMob = function(mob)
        if rainlibrary.Unloaded then
            return
        end
        local espObjects = {}
        espObjects.tracer = draw("Line", {Color = Color3.fromRGB(255, 255, 255), ZIndex = 1, Transparency = 0.5})
        espObjects.text = draw("Text", {Color = Color3.fromRGB(255, 255, 255),Font = 2, Center = true, Outline = true, ZIndex = 1, Size = 13,Transparency = 0.75})
        espObjects.box = draw("Square", {Color = Color3.fromRGB(255, 255, 255), Thickness = 1.5, ZIndex = 1})
        local espConnection = runService.RenderStepped:Connect(function()
            if mob and esp.IsAMob(mob) then
                local humanoid,rootPart = mob:FindFirstChildOfClass("Humanoid"),mob:FindFirstChild("HumanoidRootPart") or mob.PrimaryPart or mob:FindFirstChildOfClass("Part")
                if humanoid and rootPart and humanoid.Health > 0 then
                    local distance = math.floor(localPlayer:DistanceFromCharacter(rootPart.Position))
                    local requiredDistance = Options.MobESPDistance.Value
                    if distance <= requiredDistance then
                        local screenPosition, onScreen = camera:WorldToViewportPoint(rootPart.Position)
                        local orientation = rootPart.CFrame
                        local height = (camera.CFrame - camera.CFrame.Position) * Vector3.new(0, 2.75, 0)
                        local screenHeight = math.abs(camera:WorldToScreenPoint(orientation.Position + height).Y - camera:WorldToScreenPoint(orientation.Position - height).Y)
                        local boxSize = round(Vector2.new(screenHeight / 2, screenHeight))
                        local health_percent = (humanoid.Health / humanoid.MaxHealth)
    
                        if espObjects.box ~= nil then              
                            if Toggles.MobESP.Value then
                                espObjects.box.Visible = false
                                espObjects.box.Size = boxSize
                                espObjects.box.Position = round(Vector2.new(screenPosition.X, screenPosition.Y) - (boxSize / 2))
                                espObjects.text.Visible = onScreen and Toggles.MobESP.Value
                                espObjects.text.Position = Vector2.new(((espObjects.box.Size.X / 2) + espObjects.box.Position.X), 
                                ((screenPosition.Y + espObjects.box.Size.Y / 2)))
                                espObjects.text.Size = Options.MobTextSize.Value
                                espObjects.text.Transparency = Options.MobTextTransparency.Value
                                espObjects.text.Color = Options.MobTextColor.Value
                                espObjects.text.Outline = Toggles.MobOutline.Value
                                local name = mob.Name:gsub("^%.", ""):gsub("_", " "):gsub("[%d]+", "")
                                local s = name:match("^%l")
                                espObjects.text.Text = s and ({name:gsub("^%l", s:upper())})[1] or name
                                if Toggles.MobDistance.Value then
                                    espObjects.text.Text = espObjects.text.Text..("\n|%dm|"):format(distance)
                                end
                                if Toggles.MobHealthText.Value then
                                    espObjects.text.Text = (espObjects.text.Text .. ("\n|%d/%d|"):format(humanoid.Health, humanoid.MaxHealth))
                                end
                                if Toggles.MobTracers.Value then
                                    espObjects.tracer.Transparency = Options.MobTracersTransparency.Value
                                    espObjects.tracer.Thickness = Options.MobTracersThickness.Value
                                    espObjects.tracer.Color = Options.MobTracersColor.Value
                                    espObjects.tracer.From = Vector2.new(userInputService:GetMouseLocation().X, userInputService:GetMouseLocation().Y)
                                    espObjects.tracer.To = Vector2.new(((espObjects.box.Size.X / 2) + espObjects.box.Position.X), (espObjects.box.Size.Y + espObjects.box.Position.Y))
                                    espObjects.tracer.Visible = onScreen
                                else
                                    espObjects.tracer.Visible = false
                                end
                            else
                                for index, object in next, espObjects do
                                    object.Visible = false
                                end
                            end
                        end
                    else
                        for index, object in next, espObjects do
                            object.Visible = false
                        end
                    end
                else
                    for index, object in next, espObjects do
                        object.Visible = false
                        object:Remove()
                        espObjects[index] = nil
                    end
                end
            else
                for index, object in next, espObjects do
                    object.Visible = false
                    object:Remove()
                    espObjects[index] = nil
                end
            end
        end)

        Library:GiveSignal(espConnection)
        runService.Stepped:Connect(function()
            if not espConnection.Connected then
                for index, object in next, espObjects do
                    object.Visible = false
                    object:Remove()
                    espObjects[index] = nil
                end
            end
        end)
    end
    local mobList = game:GetService("Workspace").Live:GetChildren()

    for index = 1, #mobList do
        local mob = mobList[index]

        if mob and esp.IsAMob(mob) then 
            if mob:FindFirstChild("Humanoid") and mob:FindFirstChild("HumanoidRootPart") then 
                esp.drawMob(mob)
            end
        end
    end
    
    mobList.ChildAdded:Connect(function(child)
        if esp.IsAMob(child) then
            child:WaitForChild("Humanoid")
            child:WaitForChild("HumanoidRootPart")
            wait(1)
            esp.drawMob(child)
        end
    end)
end
